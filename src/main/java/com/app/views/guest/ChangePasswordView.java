/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package com.app.views.guest;

import com.app.common.controller.ApplicationController;
import com.app.common.helper.MessageModal;
import com.app.common.helper.MessageToast;
import com.app.common.infrastructure.constants.ErrorConstant;
import com.app.common.infrastructure.exceptions.ServiceResponseException;
import com.app.services.NhanVienService;
import com.app.utils.ColorUtils;
import com.app.utils.ComponentUtils;
import com.app.utils.ContextUtils;
import com.app.utils.ResourceUtils;
import com.app.utils.ValidateUtils;
import com.app.views.UI.dialog.LoadingDialog;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author inuHa
 */


public class ChangePasswordView extends javax.swing.JPanel {

    private final NhanVienService nhanVienService = ContextUtils.getBean(NhanVienService.class);

    private ExecutorService executorService = Executors.newSingleThreadExecutor();

    private String currentPassword = null;

    private String currentConfirmPassword = null;

    private String email = null;

    private String otp = null;

    public ChangePasswordView(String email, String otp) {
        this();
        this.email = email;
        this.otp = otp;
    }

    private void setupComponents() {
        setLayout(new MigLayout("fill, insets 20", "[center]", "[center]"));
        pnlLogin.setBackground(ColorUtils.BACKGROUND_PRIMARY);
        lbLogin.setForeground(ColorUtils.PRIMARY_COLOR);

        txtPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Vui lòng nhập mật khẩu mới");
        txtConfirmPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Vui lòng xác nhận mật khẩu mới");

        SwingUtilities.invokeLater(() -> txtPassword.requestFocus());

        lbConfirmPassword.setForeground(ColorUtils.PRIMARY_TEXT);
        lbPassword.setForeground(ColorUtils.PRIMARY_TEXT);

        currentPassword = lbPassword.getText();
        currentConfirmPassword = lbConfirmPassword.getText();

        lbDesc.setText(String.format(lbDesc.getText(), ValidateUtils.MIN_LENGTH_PASSWORD, ValidateUtils.MAX_LENGTH_PASSWORD));

        KeyListener keyEnter = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    handleSubmit();
                }
            }
        };

        txtPassword.addKeyListener(keyEnter);
        txtConfirmPassword.addKeyListener(keyEnter);
    }

    /** Creates new form LoginView */
    public ChangePasswordView() {
        initComponents();
        setupComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLogin = new com.app.views.UI.panel.RoundPanel();
        jLabel1 = new javax.swing.JLabel();
        lbDesc = new javax.swing.JLabel();
        lbPassword = new javax.swing.JLabel();
        lbConfirmPassword = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        btnSubmit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lbLogin = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();

        pnlLogin.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+10));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Thay đổi mật khẩu!");

        lbDesc.setFont(lbDesc.getFont().deriveFont(lbDesc.getFont().getSize()+1f));
        lbDesc.setForeground(new java.awt.Color(204, 204, 204));
        lbDesc.setText("Mật khẩu phải có từ %d đến %d kí tự");

        lbPassword.setFont(lbPassword.getFont().deriveFont(lbPassword.getFont().getStyle() | java.awt.Font.BOLD, lbPassword.getFont().getSize()+2));
        lbPassword.setForeground(new java.awt.Color(204, 204, 204));
        lbPassword.setText("New Password");

        lbConfirmPassword.setFont(lbConfirmPassword.getFont().deriveFont(lbConfirmPassword.getFont().getStyle() | java.awt.Font.BOLD, lbConfirmPassword.getFont().getSize()+2));
        lbConfirmPassword.setForeground(new java.awt.Color(204, 204, 204));
        lbConfirmPassword.setText("Confirm New Password");

        btnSubmit.setText("Lấy lại mật khẩu");
        btnSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+1f));
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Đã có tài khoản?");

        lbLogin.setFont(lbLogin.getFont().deriveFont(lbLogin.getFont().getSize()+2f));
        lbLogin.setForeground(new java.awt.Color(255, 102, 0));
        lbLogin.setText("Đăng nhập ngay");
        lbLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLoginMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPassword)
                    .addComponent(txtConfirmPassword)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbConfirmPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbConfirmPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
	handleSubmit();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void lbLoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLoginMouseClicked
        // TODO add your handling code here:
	redirectLogin(evt);
    }//GEN-LAST:event_lbLoginMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lbConfirmPassword;
    private javax.swing.JLabel lbDesc;
    private javax.swing.JLabel lbLogin;
    private javax.swing.JLabel lbPassword;
    private com.app.views.UI.panel.RoundPanel pnlLogin;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        ImageIcon imageIcon = ResourceUtils.getImageAssets("images/bg-login.jpg");
        g.drawImage(imageIcon.getImage(), 0, 0, getWidth(), getHeight(), this);
    }

    private void handleSubmit() {
        LoadingDialog loadingDialog = new LoadingDialog(this);

        String password = txtPassword.getText().trim();
        String confirmPassword = txtConfirmPassword.getText().trim();

        String txtErrorPassword = password.isEmpty() ? currentPassword + " - Vui lòng nhập trường này" : null;
        String txtErrorConfirmPassword = confirmPassword.isEmpty() ? currentConfirmPassword + " - Vui lòng nhập trường này" : null;

        int lenPassword = password.length();

        if (txtErrorPassword == null) {
            if (lenPassword < ValidateUtils.MIN_LENGTH_PASSWORD) {
                txtErrorPassword = currentPassword + " - Phải có ít nhất " + ValidateUtils.MIN_LENGTH_PASSWORD + " kí tự";
            }

            if (lenPassword > ValidateUtils.MAX_LENGTH_PASSWORD) {
                txtErrorPassword = currentPassword + " - Nhiều nhất " + ValidateUtils.MAX_LENGTH_PASSWORD + " kí tự";
            }
        }

        if (!password.equals(confirmPassword)) {
            txtErrorConfirmPassword = currentConfirmPassword + " - Mật khẩu nhập lại không chính xác";
        }
        
        boolean isErrorPassword = txtErrorPassword != null;
        boolean isErrorConfirmPassword = txtErrorConfirmPassword != null;

        ComponentUtils.setErrorLabel(lbPassword, isErrorPassword, (txtErrorPassword != null ? txtErrorPassword : currentPassword));
        ComponentUtils.setErrorLabel(lbConfirmPassword, isErrorConfirmPassword, (txtErrorConfirmPassword != null ? txtErrorConfirmPassword : currentConfirmPassword));

        if (isErrorPassword || isErrorConfirmPassword) {
            return;
        }

        executorService.submit(() -> {
            try {
                nhanVienService.changePassword(this.email, this.otp, password, confirmPassword);
                loadingDialog.dispose();
                MessageToast.clearAll();
                MessageToast.success("Thay đổi mật khẩu thành công. Đăng nhập ngay");
                ApplicationController.getInstance().show(new LoginView(this.email));
            } catch(ServiceResponseException e) {
                loadingDialog.dispose();
                MessageModal.error(e.getMessage());
            } catch(Exception e) {
                loadingDialog.dispose();
                MessageModal.error(ErrorConstant.DEFAULT_ERROR);
            }
        });

        loadingDialog.setVisible(true);
    }

    private void redirectLogin(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
            ApplicationController.getInstance().show(new LoginView());
        }
    }
}
